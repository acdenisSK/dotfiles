#+TITLE: Emacs configuration
#+STARTUP: showeverything

* Startup

** Garbage collector

   This configures the garbage collector to run at around 40 MBs, rather than the default 800 kBs.
   This improves the startup time.

   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold 40000000)

     (defun startup/reset-gc ()
       (setq gc-cons-threshold 800000))

     (add-hook 'emacs-startup-hook 'startup/reset-gc)
   #+END_SRC

* Defaults

  This changes the default settings to something more sane and useful.

** Configure tabs and the TAB key

   This turns tabs to spaces, and sets the default width of tabs to 4.
   Additionally, this configures the TAB key to indent if at the beginning of a line,
   otherwise to invoke a completion system and present a menu.

   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq-default tab-width 4)
     (setq tab-always-indent 'complete)
   #+END_SRC

** Delete behaviour

   This configures the delete behaviour when deleting backward. Specifically,
   to remove all whitespace that is a tab or space.

   #+BEGIN_SRC emacs-lisp
     (setq backward-delete-char-untabify-method 'hungry)
   #+END_SRC

** Next line behaviour

   This avoids adding a new line whenever navigating to the next line at the end of a buffer.

   #+BEGIN_SRC emacs-lisp
     (setq next-line-add-newlines nil)
   #+END_SRC

** Backup

   This disables backup files. They clutter the filesystem.

   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil)
     (setq auto-save-default nil)
   #+END_SRC

** Scroll

   This mimics scrolling behaviour of other text editors.

   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 100)
   #+END_SRC

** UTF-8

   This enforces the UTF-8 encoding system across the entirety of Emacs.

   #+BEGIN_SRC emacs-lisp
     (setq locale-coding-system 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
   #+END_SRC

** Ring bell

   This disables the ring bell whenever performing an illegal operation. It's annoying.

   #+BEGIN_SRC emacs-lisp
     (setq ring-bell-function 'ignore)
   #+END_SRC

** Trailling whitespace

   This adds a hook for deleting trailing whitespace whenever a file is saved.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC

** Highlighting

   This adds various highlighting/display modes, such as highlighting pairs of parentheses,
   the current line, and displaying the current line and column number in the modeline.
   In addition, it enables absolute line numbers in =prog-mode= buffers.

   #+BEGIN_SRC emacs-lisp
     (show-paren-mode 1)
     (global-hl-line-mode)

     (setq line-number-mode t)
     (setq column-number-mode t)

     (add-hook 'prog-mode-hook (lambda () (display-line-numbers-mode)))
   #+END_SRC

** (G)UI elements

   This removes unnecessary elements of the UI that only clutter the space.

   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
     (tooltip-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
   #+END_SRC


** Startup message

   This disables the startup message. This is substituted by the dashboard package.

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC

** Keybindings

   This adds new and changes existing keybindings.

   #+BEGIN_SRC emacs-lisp
     (defun kill-current-buffer ()
       "Kill the current buffer."
       (interactive)
       (kill-buffer (current-buffer)))

     (global-set-key (kbd "C-x k") 'kill-current-buffer)

     (global-set-key (kbd "C-x b") 'ibuffer)

     (global-set-key (kbd "M-h") 'windmove-left)
     (global-set-key (kbd "M-j") 'windmove-down)
     (global-set-key (kbd "M-k") 'windmove-up)
     (global-set-key (kbd "M-l") 'windmove-right)

     (global-set-key (kbd "C-=") 'text-scale-increase)
     (global-set-key (kbd "C-+") 'text-scale-decrease)
   #+END_SRC

* Packages

** Theme

   This changes the theme to Atom's OneDark theme.

   #+BEGIN_SRC emacs-lisp
     (use-package atom-one-dark-theme
       :ensure t
       :config (load-theme 'atom-one-dark t))
   #+END_SRC

** Modeline

   This installs and uses Doom Emacs' modeline.

   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :ensure t)

     (use-package doom-modeline
       :ensure t
       :after all-the-icons
       :config
       (doom-modeline-mode 1))
   #+END_SRC

** Dashboard

   This configures a dashboard of recently opened files for display on startup.

   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :ensure t
       :after all-the-icons
       :init
       (setq
        dashboard-items '((recents . 15))
        dashboard-set-file-icons t
        dashboard-set-heading-icons t)
       :config
       (dashboard-setup-startup-hook))
   #+END_SRC

** Visual

   This adds packages that improve visual fidelity.

   #+BEGIN_SRC emacs-lisp
     ;; Highlight colours in HTML/CSS when using hexadecimal notation.
     (use-package rainbow-mode
       :ensure t
       :hook ((html-mode . rainbow-mode)
              (css-mode . rainbow-mode)))

     ;; Render emojis when their unicode data is present in a buffer.
     (use-package emojify
       :ensure t
       :config (global-emojify-mode 1))
   #+END_SRC

** Option prompt

   This shows a prompt when leaving a keybinding unfinished, to display which options
   are available.

   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :init
       (setq which-key-idle-delay 1)
       :config
       (which-key-mode 1))
   #+END_SRC

** Undo/redo behaviour

   This enables sane undo/redo behaviour present in other text editors.

   #+BEGIN_SRC emacs-lisp
     (use-package undo-fu
       :ensure t)
   #+END_SRC

** Text editing/navigation goodies

   This adds packages that improve the text editing or navigation experience.

   #+BEGIN_SRC emacs-lisp
     ;; Quickly select a region of text/code from the current cursor position.
     (use-package expand-region
       :ensure t
       :bind ("C-q" . er/expand-region))

     ;; Quickly jump to a specific character in a buffer.
     (use-package avy
       :ensure t
       :bind ("M-s" . avy-goto-char))
   #+END_SRC

** EditorConfig

   This passes the control of some options to EditorConfig.

   #+BEGIN_SRC emacs-lisp
     (use-package editorconfig
       :ensure t
       :config (editorconfig-mode 1))
   #+END_SRC

** Modes

   This adds support for new major-modes.

   #+BEGIN_SRC emacs-lisp
     (use-package toml-mode
       :ensure t)

     (use-package cmake-mode
       :ensure t)

     (use-package meson-mode
       :ensure t)
   #+END_SRC

*** Emmet

    This adds support for emmet snippets in web modes.

    #+BEGIN_SRC emacs-lisp
      (use-package emmet-mode
        :ensure t
        :hook ((html-mode . emmet-mode)
               (css-mode . emmet-mode)))
    #+END_SRC

** Emacs completion

   This configures the completion system for Emacs systems and utilities.

   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :ensure t
       :init
       (setq
        ivy-use-virtual-buffers t
        enable-recursive-minibuffers t)
       :config
       (ivy-mode 1))

     (use-package ivy-rich
       :ensure t
       :after ivy
       :config
       (ivy-rich-mode 1))

     (use-package counsel
       :ensure t
       :after (ivy ivy-rich)
       :config
       (counsel-mode 1))
   #+END_SRC

** Vim emulation

   This adds emulation of Vim keybindings to Emacs.

   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t
       :init
       (setq
        evil-want-integration t
        evil-want-keybinding nil
        evil-want-C-u-scroll t
        evil-want-C-i-jump nil
        evil-undo-system 'undo-fu)
       :config
       (evil-mode 1)
       (add-to-list 'evil-emacs-state-modes 'dired-mode))
   #+END_SRC

** Syntax checking

   This configures flycheck for checking syntax of various languages.

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :hook (prog-mode . flycheck-mode))
   #+END_SRC

** Project management

   This adds support for managing projects neatly in Emacs.

   #+BEGIN_SRC emacs-lisp

     (use-package projectile
       :ensure t
       :init
       (when (file-directory-p "~/Projects")
         (setq projectile-project-search-path '("~/Projects")))
       (setq projectile-switch-project-action #'projectile-dired)
       :config (projectile-mode 1)
       :bind-keymap ("C-c p" . projectile-command-map))
   #+END_SRC

** Language server

   This adds support for language servers. For now, only C, C++, and Rust are configured.

   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :ensure t
       :init
       (setq lsp-keymap-prefix "C-c l")
       :hook (((c-mode c++-mode rust-mode) . lsp)
              (lsp-mode . lsp-enable-which-key-integration))
       :commands lsp)

     (use-package lsp-ui
       :ensure t
       :hook (lsp-mode . lsp-ui-mode))

     (use-package lsp-ivy
       :ensure t
       :after ivy
       :commands lsp-ivy-workspace-symbol)

     (use-package rustic
       :ensure t
       :init
       (setq
        rustic-lsp-client 'lsp-mode
        rustic-lsp-server 'rust-analyzer))

     (use-package company
       :ensure t
       :after lsp-mode
       :hook (prog-mode . company-mode)
       :bind ((:map company-active-map
                    ("<tab>" . company-complete-selection)
                    ("C-n" . company-select-next)
                    ("C-p" . company-select-previous))
              (:map lsp-mode-map
                    ("<tab>" . company-indent-or-complete-common)))
       :custom
       (company-idle-delay 0.8)
       (company-minimum-prefix-length 1)
       (company-selection-wrap-around t))

     ;; Do not enable in terminal Emacs, does not work there.
     (if window-system
         (use-package company-box
           :ensure t
           :hook (company-mode . company-box-mode)))
   #+END_SRC
